using System.Collections;
using System;
using UnityEngine;
using UnityEngine.Networking;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEngine.UI;
using System.Net;
using Unity.VisualScripting;

[Serializable]
public class MeshData{
    public string data;
}


public class ModelGenerator : MonoBehaviour
{
    [SerializeField] private GameObject lastModel = null;
    [SerializeField] private Material modelMaterial;
    [SerializeField] private GameObject parent;

    private string urlhost = "http://localhost:8000"; 
    private string url = "http://localhost:8000?height=1.4";
    private float startHeight = 2.5f;

    [SerializeField] private Text consoleText;
    [SerializeField] private Text heightInput;

    void Start ( ) {
        GenerateUrl(startHeight);
        heightInput.transform.parent.GetComponent<InputField>().text = startHeight.ToString(); 
    }

    void GenerateUrl(float height)
    {
        url = urlhost + "?height=" + height;
    }

    IEnumerator GetRequest(string url, Action<UnityWebRequest> callback)
    {
        using (UnityWebRequest request = UnityWebRequest.Get(url))
        {
            yield return request.SendWebRequest();
            callback(request);
        }
    }

    public void GetModel()
    {
        GenerateUrl(float.Parse(heightInput.text));

        DateTime startTime = DateTime.Now;
        StartCoroutine(GetRequest(url, (UnityWebRequest req) =>
        {
            switch (req.result)
            {
                case UnityWebRequest.Result.ConnectionError:
                case UnityWebRequest.Result.DataProcessingError: 
                    consoleText.text = req.error; 
                    break;
                case UnityWebRequest.Result.ProtocolError:
                    consoleText.text = req.error; 
                    break;
                case UnityWebRequest.Result.Success: 
                    MeshData meshdata = JsonUtility.FromJson<MeshData>(req.downloadHandler.text);
                    GeneratePlane(meshdata.data);
                    TimeSpan endTime = DateTime.Now - startTime;
                    consoleText.text = $"Model generated in {Convert.ToInt32(endTime.TotalMilliseconds)} ms";
                    break;
            }
        }));
    }

    List<Vector3> ParseVertices(string data){
        List<Vector3> verts = new List<Vector3>();

        string[] lines = data.Split('\n');

        for (int i = 0; i < lines.Length; i++)
        {
            if (lines[i].StartsWith("v "))
            {
                string[] splits = lines[i].Split(" ");
                verts.Add(new Vector3(
                    float.Parse(splits[1]), 
                    float.Parse(splits[2]), 
                    float.Parse(splits[3]))
                );
            }
            else
            {
                continue;
            }
        }

        return verts;
    }

    List<int> ParseFaces(string data)
    {
        List<int> faces = new List<int>();

        string[] lines = data.Split('\n');

        for (int i = 0; i < lines.Length; i++)
        {
            if (lines[i].StartsWith("f "))
            {
                string[] splits = lines[i].Split(" ");

                foreach (string s in splits)
                {
                    if (s.StartsWith("f"))
                    {
                        continue;
                    }else if 
                        (s == String.Empty) { continue; }
                    else
                    {
                        string[] verts = s.Split("/");

                        faces.Add(int.Parse(verts[0]));
                        faces.Add(int.Parse(verts[1]));
                        faces.Add(int.Parse(verts[2]));
                    } 
                } 
            }
            else
            {
                continue;
            }
        }

        return faces;
    }

    void GeneratePlane(string data)
    {
        Vector3[] vertices = ParseVertices(data).ToArray();
        int[] triangles = ParseFaces(data).ToArray();

        Mesh mesh = new Mesh();
        mesh.vertices = vertices;
        mesh.triangles = triangles;
        mesh.RecalculateNormals();

        GameObject plane = new GameObject("AutoGeneratedPlane");
        plane.AddComponent<MeshRenderer>();
        plane.GetComponent<MeshRenderer>().material = modelMaterial;
        MeshFilter meshFilter = plane.AddComponent<MeshFilter>();
        meshFilter.mesh = mesh;

        if (lastModel != null)
        {
            Destroy(lastModel);
        }

        plane.transform.SetParent(parent.transform, false);
        lastModel = plane;
    }
}